package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
// Imports are used the same way as in Java. Its necessary to import Sensor, Action, and WME classes.
/** 
 * A simple agent that moves towards the player and occasionally fires bullets.
 *
 * @author Josh McCoy 1-23-2019
 * @author Ben Weber 3-7-11
 */ 
behaving_entity ChaserAgent {
// This defines a name for the agent 

	/** 
	 * Define the physicals actions that the agent can perform. The definition includes an action prototype and
	 * and an action class name. The class name must be a Java class which has been imported. 
	 *
	 * The prototype parameters correspond to the types expected by the execute(object[]) method 
	 * in the action's Java class.
	 */
	register act moveTo(int, int, int) with MoveTo; 
	register act stop(int) with Stop;
	register act fire(int, int, int, int) with Fire;
	register act isNew(int) with IsNew;

	/**
	 * Define the sensors that add game state to working memory. Each sensor defines the name of the WME class
	 * that it is responsible for managing and the Java sensor class that implements the functionality. 
	 */
    register wme PlayerWME with PlayerSensor;
    register wme BotWME with BotSensor;

	/**
	 * Defines a variable scope to the agent, which can be used and modified in behaviors. 
	 *
	 * It is also possible to use constants from a Java interface (e.g.):
     * constants game.Constants;   
	 */ 
	int botSpeed = 2;	

	sequential behavior angryBots(int id) {
		subgoal Wait(500);
		with (persistent) subgoal avoid(id);
	}
	
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY id::bid)
			(playerY > botY)
			(50 > playerY - botY)
			(botY < 430) //keep bot on screen
			(bid == id)
		}
		specificity 2;
		act moveTo(0,-1,id);
		subgoal Wait(100);
	}
	
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY id::bid)
			(playerY < botY)
			(50 > botY - playerY)
			(botY < 430)
			(bid == id)
		}
		specificity 2;
		act moveTo(0,1,id);
		subgoal Wait(100);
	}
	
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX id::bid)
			(playerX > botX)
			(50 > playerX - botX)
			(botX < 620)
			(bid == id)
		}
		specificity 2;
		act moveTo(-1,0,id);
		subgoal Wait(100);
	}
	
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX id::bid)
			(playerX < botX)
			(50 > botX - playerX)
			(botX < 620)
			(bid == id)
		}
		specificity 2;
		act moveTo(1,0,id);
		subgoal Wait(100);
	}
	
	//corner case
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationX::botX locationY::botY id::bid)
			(botX >= 560)
			(botY >= 370)
			(bid == id)
		}
		specificity 3;
		act moveTo(-1,-1,id);
		subgoal Wait(100);
	}
	
	//corner case
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationX::botX locationY::botY id::bid)
			(botX >= 560)
			(botY <= 60)
			(bid == id)
		}
		specificity 3;
		act moveTo(-1,1,id);
		subgoal Wait(100);
	}
	
	//corner case
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationX::botX locationY::botY id::bid)
			(botX <= 60)
			(botY <= 60)
			(bid == id)
		}
		specificity 3;
		act moveTo(1,1,id);
		subgoal Wait(100);
	}
	
	//corner case
	sequential behavior avoid(int id) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationX::botX locationY::botY id::bid)
			(botX <= 60)
			(botY >= 370)
			(bid == id)
		}
		specificity 3;
		act moveTo(1,-1,id);
		subgoal Wait(100);
	}
	
	sequential behavior avoid(int id) {
		precondition {
			(BotWME id::bid)
			(bid == id)
		}
		specificity 1;
		act stop(id);
		subgoal Wait(100);
	}


	sequential behavior detectNewBots(){
		subgoal Wait(1000);
		with (persistent) subgoal newBotGoal();
	}
	
	sequential behavior newBotGoal(){
		precondition {
			(BotWME id::id newb::newb)
			(newb == 1)
		}
		subgoal newBotGoals(id);
		act isNew(id);
		subgoal Wait(500);
	}
	
	parallel behavior newBotGoals(int id){
		with (priority 3) spawngoal manageFiring(id);
		with (priority 2) spawngoal angryBots(id);
		with (priority 4) mental_act {
			System.out.println("spawned new goals");
    	}
	}

	/**
	 * After an initial delay, continuously fire bullets. 
	 */
	sequential behavior manageFiring(int id) {
		subgoal Wait(2000);					// this suspends the execution of the behavior
		with (persistent) subgoal fire(id);
	}

    /**
     * Fires a bullet at the player character using the bot position at the source and the player position as the target
     *
     * Each fire action is followed by a cooldown period. 
     */
	sequential behavior fire(int bid) {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)	// locationX invokes PlayerMWE.getLocationX() 
			(BotWME locationX::botX locationY::botY id::id)   // :: is used to bind properties to behavior scoped variables
			(id == bid)
		}

		act fire(botX, botY, playerX, playerY);	
		subgoal Wait(500);
	}



    /**
     * Utility behavior for suspending the execution of a behavior.
     *
     * This behavior consist of two steps. First, the mental act compute the finishing time
     * based on the input delay. Second, the success tests waits until the condition check
     * evaluates to true.
     */
	sequential behavior Wait(int milliseconds) {
		long finish;
	    mental_act { 
	    	finish = System.currentTimeMillis() + milliseconds; 
	    }
	    
	    with ( success_test { (System.currentTimeMillis() > finish) } ) wait;
	}
 
    /** 
     * Root of the active behavior tree.
     *
     * Note: this is a parallel behavior.
     * Note: the ABL compiler expects this to be the last behavior defined in the agent. 
     * Note: priorities are used to ensure all goals are pursued, since the move() goal can thrash in this simple example
     */
    initial_tree {
    	with (priority 4) mental_act {
			System.out.println("Starting bot Agent 3");
    	}
     	
    	with (priority 3) subgoal manageFiring(0);
    	with (priority 2) subgoal angryBots(0);
    	with (priority 2) subgoal detectNewBots();
    }
}
