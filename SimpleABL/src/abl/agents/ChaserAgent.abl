package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
// Imports are used the same way as in Java. Its necessary to import Sensor, Action, and WME classes.
/** 
 * 
 *
 * @author Josh McCoy 1-23-2019
 * @author Ben Weber 3-7-11
 */ 
behaving_entity ChaserAgent {
// This defines a name for the agent 

	/** 
	 * Define the physicals actions that the agent can perform. The definition includes an action prototype and
	 * and an action class name. The class name must be a Java class which has been imported. 
	 *
	 * The prototype parameters correspond to the types expected by the execute(object[]) method 
	 * in the action's Java class.
	 */
	register act moveTo(int, int, int) with MoveTo; 
	register act stop(int) with Stop;

    register wme PlayerWME with PlayerSensor;
    register wme BotWME with BotSensor;

	int botSpeed = 1;	


	sequential behavior manageFormation(int id){
		with (persistent) subgoal formation(id);
	}
	
	sequential behavior formation(int bid) {
		precondition {
			(BotWME  fBot::fBot id::id) 
			(fBot == 1)
			(id == bid)
		}
		specificity 1;
		act stop(id);
		subgoal Wait(20);
	}

	sequential behavior formation(int bid) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY formationY::formationY fBot::fBot id::id) 
			(botY > (playerY + formationY))
			(fBot == 1)
			(id == bid)
		}
		specificity 3;
		act moveTo(0,-1,id);
		subgoal Wait(20);
	}
	
	sequential behavior formation(int bid) {
		precondition {
			(PlayerWME locationY::playerY)
			(BotWME locationY::botY formationY::formationY fBot::fBot id::id) 
			(botY < (playerY + formationY))
			(fBot == 1)
			(id == bid)
		}
		specificity 3;
		act moveTo(0,1,id);
		subgoal Wait(20);
	}
	
	sequential behavior formation(int bid) {
		precondition {
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX formationX::formationX fBot::fBot id::id) 
			(botX < (playerX + formationX))
			(fBot == 1)
			(id == bid)
		}
		specificity 2;
		act moveTo(1,0,id);
		subgoal Wait(20);
	}
	
	sequential behavior formation(int bid) {
		precondition {
			(PlayerWME locationX::playerX)
			(BotWME locationX::botX formationX::formationX fBot::fBot id::id) 
			(botX > (playerX + formationX))
			(fBot == 1)
			(id == bid)
		}
		specificity 2;
		act moveTo(-1,0,id);
		subgoal Wait(20);
	}
	


    /**
     * Utility behavior for suspending the execution of a behavior.
     *
     * This behavior consist of two steps. First, the mental act compute the finishing time
     * based on the input delay. Second, the success tests waits until the condition check
     * evaluates to true.
     */
	sequential behavior Wait(int milliseconds) {
		long finish;
	    mental_act { 
	    	finish = System.currentTimeMillis() + milliseconds; 
	    }
	    
	    with ( success_test { (System.currentTimeMillis() > finish) } ) wait;
	}
 
    /** 
     * Root of the active behavior tree.
     *
     * Note: this is a parallel behavior.
     * Note: the ABL compiler expects this to be the last behavior defined in the agent. 
     * Note: priorities are used to ensure all goals are pursued, since the move() goal can thrash in this simple example
     */
    initial_tree {
    	with (priority 4) mental_act {
			System.out.println("Starting bot Agent");
    	}
    	with (priority 3) subgoal manageFormation(1);
    	with (priority 3) subgoal manageFormation(2);
    	with (priority 3) subgoal manageFormation(3);
    	with (priority 3) subgoal manageFormation(4);
    }
}
